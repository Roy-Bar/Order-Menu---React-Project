{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\roy.b\\\\Documents\\\\React course\\\\Section11\\\\01-starting-project\\\\01-starting-project\\\\src\\\\store\\\\CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from \"react\";\nimport CartContext from \"./cart-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADD_ITEM\") {\n    const updatedTotalAmount = state.totalAmount + action.value.price * action.value.amount;\n    const existingCartItemIndex = state.items.findIndex(item => {\n      return item.id === action.value.id;\n    });\n    const existingCartItem = state.items[existingCartItemIndex];\n    let updatedItems;\n\n    if (existingCartItem) {\n      const updatedItem = { ...existingCartItem,\n        amount: existingCartItem.amount + action.value.amount\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIndex] = updatedItem;\n    } else {\n      updatedItems = state.items.concat(action.value);\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  } else if (action.type === \"REMOVE_ITEM\") {\n    const id = action.value;\n    const existingCartItemIndex = state.items.findIndex(item => {\n      return item.id === id;\n    });\n    const existingCartItem = state.items[existingCartItemIndex];\n\n    if (existingCartItem) {\n      //if item exists\n      const updatedTotalAmount = state.totalAmount - existingCartItem.price; //reduce the total price\n\n      const updatedItems = [...state.items]; //copy current cart items\n\n      if (existingCartItem.amount > 1) {\n        updatedItems[existingCartItemIndex].amount--;\n      } else {\n        updatedItems[existingCartItemIndex].splice;\n      }\n\n      return {\n        items: updatedItems,\n        totalAmount: updatedTotalAmount\n      };\n    } else {\n      return state;\n    }\n  } else return defaultCartState;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  const addItemToCartHandler = item => {\n    dispatchCartAction({\n      type: \"ADD_ITEM\",\n      value: item\n    });\n  };\n\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction({\n      type: \"REMOVE_ITEM\",\n      value: id\n    });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 10\n  }, this);\n};\n\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["C:/Users/roy.b/Documents/React course/Section11/01-starting-project/01-starting-project/src/store/CartProvider.js"],"names":["React","useReducer","CartContext","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedTotalAmount","value","price","amount","existingCartItemIndex","findIndex","item","id","existingCartItem","updatedItems","updatedItem","concat","splice","CartProvider","props","cartState","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","cartContext","addItem","removeItem","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from \"react\";\r\n\r\nimport CartContext from \"./cart-context\";\r\n\r\nconst defaultCartState = {\r\n  items: [],\r\n  totalAmount: 0,\r\n};\r\n\r\nconst cartReducer = (state, action) => {\r\n  if (action.type === \"ADD_ITEM\") {\r\n    const updatedTotalAmount = state.totalAmount + action.value.price * action.value.amount;\r\n\r\n    const existingCartItemIndex = state.items.findIndex((item) => {\r\n      return item.id === action.value.id;\r\n    });\r\n    const existingCartItem = state.items[existingCartItemIndex];\r\n    let updatedItems;\r\n\r\n    if (existingCartItem) {\r\n      const updatedItem = {\r\n        ...existingCartItem,\r\n        amount: existingCartItem.amount + action.value.amount,\r\n      };\r\n      updatedItems = [...state.items];\r\n      updatedItems[existingCartItemIndex] = updatedItem;\r\n    } else {\r\n      updatedItems = state.items.concat(action.value);\r\n    }\r\n\r\n    return { items: updatedItems, totalAmount: updatedTotalAmount };\r\n  } else if (action.type === \"REMOVE_ITEM\") {\r\n    const id = action.value;\r\n\r\n    const existingCartItemIndex = state.items.findIndex((item) => {\r\n      return item.id === id;\r\n    });\r\n    const existingCartItem = state.items[existingCartItemIndex];\r\n    \r\n    if (existingCartItem) { //if item exists\r\n      const updatedTotalAmount = state.totalAmount - existingCartItem.price; //reduce the total price\r\n      const updatedItems = [...state.items]; //copy current cart items\r\n\r\n      if (existingCartItem.amount > 1) {\r\n        updatedItems[existingCartItemIndex].amount--;\r\n      } else {\r\n        updatedItems[existingCartItemIndex].splice\r\n      }\r\n      return { items: updatedItems, totalAmount: updatedTotalAmount };\r\n    } else {\r\n      return state;\r\n    }\r\n  } else return defaultCartState;\r\n};\r\n\r\nconst CartProvider = (props) => {\r\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\r\n\r\n  const addItemToCartHandler = (item) => {\r\n    dispatchCartAction({ type: \"ADD_ITEM\", value: item });\r\n  };\r\n  const removeItemFromCartHandler = (id) => {\r\n    dispatchCartAction({ type: \"REMOVE_ITEM\", value: id });\r\n  };\r\n\r\n  const cartContext = {\r\n    items: cartState.items,\r\n    totalAmount: cartState.totalAmount,\r\n    addItem: addItemToCartHandler,\r\n    removeItem: removeItemFromCartHandler,\r\n  };\r\n\r\n  return <CartContext.Provider value={cartContext}>{props.children}</CartContext.Provider>;\r\n};\r\n\r\nexport default CartProvider;\r\n"]},"metadata":{},"sourceType":"module"}