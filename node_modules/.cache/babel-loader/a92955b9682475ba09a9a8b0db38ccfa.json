{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\roy.b\\\\Documents\\\\React course\\\\Section11\\\\01-starting-project\\\\01-starting-project\\\\src\\\\store\\\\CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from \"react\";\nimport CartContext from \"./cart-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === 'ADD_ITEM') {\n    const updatedTotalAmount = state.totalAmount + action.value.price * action.value.amount;\n    const existingCartItemIndex = state.items.findIndex;\n    const updatedItems = state.items.concat(action.value);\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  } else if (action.type === 'REMOVE_ITEM') {//REMOVE ITEM\n  } else return defaultCartState;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  const addItemToCartHandler = item => {\n    dispatchCartAction({\n      type: 'ADD_ITEM',\n      value: item\n    });\n  };\n\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction({\n      type: 'REMOVE_ITEM',\n      value: id\n    });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 10\n  }, this);\n};\n\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["C:/Users/roy.b/Documents/React course/Section11/01-starting-project/01-starting-project/src/store/CartProvider.js"],"names":["React","useReducer","CartContext","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedTotalAmount","value","price","amount","existingCartItemIndex","findIndex","updatedItems","concat","CartProvider","props","cartState","dispatchCartAction","addItemToCartHandler","item","removeItemFromCartHandler","id","cartContext","addItem","removeItem","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,UAAf,QAAgC,OAAhC;AAEA,OAAOC,WAAP,MAAwB,gBAAxB;;AAEA,MAAMC,gBAAgB,GAAG;AACvBC,EAAAA,KAAK,EAAE,EADgB;AAEvBC,EAAAA,WAAW,EAAE;AAFU,CAAzB;;AAKA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,MAAIA,MAAM,CAACC,IAAP,KAAgB,UAApB,EAAgC;AAC9B,UAAMC,kBAAkB,GAAGH,KAAK,CAACF,WAAN,GAAoBG,MAAM,CAACG,KAAP,CAAaC,KAAb,GAAqBJ,MAAM,CAACG,KAAP,CAAaE,MAAjF;AAEA,UAAMC,qBAAqB,GAAGP,KAAK,CAACH,KAAN,CAAYW,SAA1C;AACA,UAAMC,YAAY,GAAGT,KAAK,CAACH,KAAN,CAAYa,MAAZ,CAAmBT,MAAM,CAACG,KAA1B,CAArB;AAEA,WAAO;AAACP,MAAAA,KAAK,EAAEY,YAAR;AAAsBX,MAAAA,WAAW,EAAEK;AAAnC,KAAP;AACD,GAPD,MAOO,IAAIF,MAAM,CAACC,IAAP,KAAgB,aAApB,EAAmC,CACxC;AACD,GAFM,MAEA,OAAON,gBAAP;AACR,CAXD;;AAaA,MAAMe,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAC9B,QAAM,CAACC,SAAD,EAAYC,kBAAZ,IAAkCpB,UAAU,CAACK,WAAD,EAAcH,gBAAd,CAAlD;;AAEA,QAAMmB,oBAAoB,GAAIC,IAAD,IAAU;AACrCF,IAAAA,kBAAkB,CAAC;AAACZ,MAAAA,IAAI,EAAE,UAAP;AAAmBE,MAAAA,KAAK,EAAEY;AAA1B,KAAD,CAAlB;AACD,GAFD;;AAGA,QAAMC,yBAAyB,GAAIC,EAAD,IAAQ;AACxCJ,IAAAA,kBAAkB,CAAC;AAACZ,MAAAA,IAAI,EAAE,aAAP;AAAsBE,MAAAA,KAAK,EAAEc;AAA7B,KAAD,CAAlB;AACD,GAFD;;AAIA,QAAMC,WAAW,GAAG;AAClBtB,IAAAA,KAAK,EAAEgB,SAAS,CAAChB,KADC;AAElBC,IAAAA,WAAW,EAAEe,SAAS,CAACf,WAFL;AAGlBsB,IAAAA,OAAO,EAAEL,oBAHS;AAIlBM,IAAAA,UAAU,EAAEJ;AAJM,GAApB;AAOA,sBAAO,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEE,WAA7B;AAAA,cAA2CP,KAAK,CAACU;AAAjD;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAlBD;;GAAMX,Y;;KAAAA,Y;AAoBN,eAAeA,YAAf","sourcesContent":["import React, {useReducer} from \"react\";\r\n\r\nimport CartContext from \"./cart-context\";\r\n\r\nconst defaultCartState = {\r\n  items: [],\r\n  totalAmount: 0,\r\n};\r\n\r\nconst cartReducer = (state, action) => {\r\n  if (action.type === 'ADD_ITEM') {\r\n    const updatedTotalAmount = state.totalAmount + action.value.price * action.value.amount;\r\n    \r\n    const existingCartItemIndex = state.items.findIndex\r\n    const updatedItems = state.items.concat(action.value);\r\n\r\n    return {items: updatedItems, totalAmount: updatedTotalAmount};\r\n  } else if (action.type === 'REMOVE_ITEM') {\r\n    //REMOVE ITEM\r\n  } else return defaultCartState;\r\n}\r\n\r\nconst CartProvider = (props) => {\r\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState, );\r\n\r\n  const addItemToCartHandler = (item) => {\r\n    dispatchCartAction({type: 'ADD_ITEM', value: item});\r\n  };\r\n  const removeItemFromCartHandler = (id) => {\r\n    dispatchCartAction({type: 'REMOVE_ITEM', value: id});\r\n  };\r\n\r\n  const cartContext = {\r\n    items: cartState.items,\r\n    totalAmount: cartState.totalAmount,\r\n    addItem: addItemToCartHandler,\r\n    removeItem: removeItemFromCartHandler,\r\n  };\r\n\r\n  return <CartContext.Provider value={cartContext}>{props.children}</CartContext.Provider>;\r\n};\r\n\r\nexport default CartProvider;\r\n"]},"metadata":{},"sourceType":"module"}