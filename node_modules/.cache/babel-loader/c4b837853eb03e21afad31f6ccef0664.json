{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\roy.b\\\\Documents\\\\React course\\\\Section11\\\\01-starting-project\\\\01-starting-project\\\\src\\\\store\\\\CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from \"react\";\nimport CartContext from \"./cart-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADD_ITEM\") {\n    return newFunction(state, action);\n  } else if (action.type === \"REMOVE_ITEM\") {//REMOVE ITEM\n  } else return defaultCartState;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  const addItemToCartHandler = item => {\n    dispatchCartAction({\n      type: \"ADD_ITEM\",\n      value: item\n    });\n  };\n\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction({\n      type: \"REMOVE_ITEM\",\n      value: id\n    });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 10\n  }, this);\n};\n\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nfunction newFunction(state, action) {\n  const updatedTotalAmount = state.totalAmount + action.value.price * action.value.amount;\n  const existingCartItemIndex = state.items.findIndex(item => {\n    return item.id === action.value.id;\n  });\n  const existingCartItem = state.items[existingCartItemIndex];\n  let updatedItems;\n\n  if (existingCartItem) {\n    const updatedItem = { ...existingCartItem,\n      amount: existingCartItem.amount + action.value.amount\n    };\n    updatedItems = [...state.items];\n    updatedItems[existingCartItemIndex] = updatedItem;\n  } else {\n    updatedItems = state.items.concat(action.value);\n  }\n\n  return {\n    items: updatedItems,\n    totalAmount: updatedTotalAmount\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["C:/Users/roy.b/Documents/React course/Section11/01-starting-project/01-starting-project/src/store/CartProvider.js"],"names":["React","useReducer","CartContext","defaultCartState","items","totalAmount","cartReducer","state","action","type","newFunction","CartProvider","props","cartState","dispatchCartAction","addItemToCartHandler","item","value","removeItemFromCartHandler","id","cartContext","addItem","removeItem","children","updatedTotalAmount","price","amount","existingCartItemIndex","findIndex","existingCartItem","updatedItems","updatedItem","concat"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AAEA,OAAOC,WAAP,MAAwB,gBAAxB;;AAEA,MAAMC,gBAAgB,GAAG;AACvBC,EAAAA,KAAK,EAAE,EADgB;AAEvBC,EAAAA,WAAW,EAAE;AAFU,CAAzB;;AAKA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,MAAIA,MAAM,CAACC,IAAP,KAAgB,UAApB,EAAgC;AAC9B,WAAOC,WAAW,CAACH,KAAD,EAAQC,MAAR,CAAlB;AACD,GAFD,MAEO,IAAIA,MAAM,CAACC,IAAP,KAAgB,aAApB,EAAmC,CACxC;AACD,GAFM,MAEA,OAAON,gBAAP;AACR,CAND;;AAQA,MAAMQ,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAC9B,QAAM,CAACC,SAAD,EAAYC,kBAAZ,IAAkCb,UAAU,CAACK,WAAD,EAAcH,gBAAd,CAAlD;;AAEA,QAAMY,oBAAoB,GAAIC,IAAD,IAAU;AACrCF,IAAAA,kBAAkB,CAAC;AAAEL,MAAAA,IAAI,EAAE,UAAR;AAAoBQ,MAAAA,KAAK,EAAED;AAA3B,KAAD,CAAlB;AACD,GAFD;;AAGA,QAAME,yBAAyB,GAAIC,EAAD,IAAQ;AACxCL,IAAAA,kBAAkB,CAAC;AAAEL,MAAAA,IAAI,EAAE,aAAR;AAAuBQ,MAAAA,KAAK,EAAEE;AAA9B,KAAD,CAAlB;AACD,GAFD;;AAIA,QAAMC,WAAW,GAAG;AAClBhB,IAAAA,KAAK,EAAES,SAAS,CAACT,KADC;AAElBC,IAAAA,WAAW,EAAEQ,SAAS,CAACR,WAFL;AAGlBgB,IAAAA,OAAO,EAAEN,oBAHS;AAIlBO,IAAAA,UAAU,EAAEJ;AAJM,GAApB;AAOA,sBAAO,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEE,WAA7B;AAAA,cAA2CR,KAAK,CAACW;AAAjD;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAlBD;;GAAMZ,Y;;KAAAA,Y;AAoBN,eAAeA,YAAf;;AACA,SAASD,WAAT,CAAqBH,KAArB,EAA4BC,MAA5B,EAAoC;AAClC,QAAMgB,kBAAkB,GAAGjB,KAAK,CAACF,WAAN,GAAoBG,MAAM,CAACS,KAAP,CAAaQ,KAAb,GAAqBjB,MAAM,CAACS,KAAP,CAAaS,MAAjF;AAEA,QAAMC,qBAAqB,GAAGpB,KAAK,CAACH,KAAN,CAAYwB,SAAZ,CAAuBZ,IAAD,IAAU;AAC5D,WAAOA,IAAI,CAACG,EAAL,KAAYX,MAAM,CAACS,KAAP,CAAaE,EAAhC;AACD,GAF6B,CAA9B;AAGA,QAAMU,gBAAgB,GAAGtB,KAAK,CAACH,KAAN,CAAYuB,qBAAZ,CAAzB;AACA,MAAIG,YAAJ;;AAEA,MAAID,gBAAJ,EAAsB;AACpB,UAAME,WAAW,GAAG,EAClB,GAAGF,gBADe;AAElBH,MAAAA,MAAM,EAAEG,gBAAgB,CAACH,MAAjB,GAA0BlB,MAAM,CAACS,KAAP,CAAaS;AAF7B,KAApB;AAIAI,IAAAA,YAAY,GAAG,CAAC,GAAGvB,KAAK,CAACH,KAAV,CAAf;AACA0B,IAAAA,YAAY,CAACH,qBAAD,CAAZ,GAAsCI,WAAtC;AACD,GAPD,MAOO;AACLD,IAAAA,YAAY,GAAGvB,KAAK,CAACH,KAAN,CAAY4B,MAAZ,CAAmBxB,MAAM,CAACS,KAA1B,CAAf;AACD;;AAED,SAAO;AAAEb,IAAAA,KAAK,EAAE0B,YAAT;AAAuBzB,IAAAA,WAAW,EAAEmB;AAApC,GAAP;AACD","sourcesContent":["import React, { useReducer } from \"react\";\r\n\r\nimport CartContext from \"./cart-context\";\r\n\r\nconst defaultCartState = {\r\n  items: [],\r\n  totalAmount: 0,\r\n};\r\n\r\nconst cartReducer = (state, action) => {\r\n  if (action.type === \"ADD_ITEM\") {\r\n    return newFunction(state, action);\r\n  } else if (action.type === \"REMOVE_ITEM\") {\r\n    //REMOVE ITEM\r\n  } else return defaultCartState;\r\n};\r\n\r\nconst CartProvider = (props) => {\r\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\r\n\r\n  const addItemToCartHandler = (item) => {\r\n    dispatchCartAction({ type: \"ADD_ITEM\", value: item });\r\n  };\r\n  const removeItemFromCartHandler = (id) => {\r\n    dispatchCartAction({ type: \"REMOVE_ITEM\", value: id });\r\n  };\r\n\r\n  const cartContext = {\r\n    items: cartState.items,\r\n    totalAmount: cartState.totalAmount,\r\n    addItem: addItemToCartHandler,\r\n    removeItem: removeItemFromCartHandler,\r\n  };\r\n\r\n  return <CartContext.Provider value={cartContext}>{props.children}</CartContext.Provider>;\r\n};\r\n\r\nexport default CartProvider;\r\nfunction newFunction(state, action) {\r\n  const updatedTotalAmount = state.totalAmount + action.value.price * action.value.amount;\r\n\r\n  const existingCartItemIndex = state.items.findIndex((item) => {\r\n    return item.id === action.value.id;\r\n  });\r\n  const existingCartItem = state.items[existingCartItemIndex];\r\n  let updatedItems;\r\n\r\n  if (existingCartItem) {\r\n    const updatedItem = {\r\n      ...existingCartItem,\r\n      amount: existingCartItem.amount + action.value.amount,\r\n    };\r\n    updatedItems = [...state.items];\r\n    updatedItems[existingCartItemIndex] = updatedItem;\r\n  } else {\r\n    updatedItems = state.items.concat(action.value);\r\n  }\r\n\r\n  return { items: updatedItems, totalAmount: updatedTotalAmount };\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}